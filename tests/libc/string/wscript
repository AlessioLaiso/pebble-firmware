from waftools.pebble_test import clar

def build(ctx):
    clar(ctx,
         sources_ant_glob = "src/libc/string/memcmp.c",
         test_sources_ant_glob = "test_memcmp.c",
         add_includes = ["src/libc"])

    clar(ctx,
         sources_ant_glob = "src/libc/string/memcpy.c",
         test_sources_ant_glob = "test_memcpy.c",
         add_includes = ["src/libc"])

    clar(ctx,
         sources_ant_glob = "src/libc/string/memset.c",
         test_sources_ant_glob = "test_memset.c",
         add_includes = ["src/libc"])

    clar(ctx,
         sources_ant_glob = "src/libc/string/memchr.c",
         test_sources_ant_glob = "test_memchr.c",
         add_includes = ["src/libc"])

    clar(ctx,
         sources_ant_glob = "src/libc/string/atoi.c" \
                            " src/libc/string/strtol.c",
         test_sources_ant_glob = "test_atoi.c",
         add_includes = ["src/libc"])

    clar(ctx,
         sources_ant_glob = "src/libc/string/strtol.c",
         test_sources_ant_glob = "test_strtol.c",
         add_includes = ["src/libc"])

    clar(ctx,
         sources_ant_glob = "src/libc/string/strcat.c" \
                            " src/libc/string/strlen.c" \
                            " src/libc/string/memcpy.c" \
                            " src/libc/string/memset.c" \
                            " src/libc/string/strcpy.c",
         test_sources_ant_glob = "test_strcat.c",
         add_includes = ["src/libc"])

    clar(ctx,
         sources_ant_glob = "src/libc/string/strlen.c",
         test_sources_ant_glob = "test_strlen.c",
         add_includes = ["src/libc"])

    clar(ctx,
         sources_ant_glob = "src/libc/string/strlen.c" \
                            " src/libc/string/memcpy.c" \
                            " src/libc/string/memset.c" \
                            " src/libc/string/strcpy.c",
         test_sources_ant_glob = "test_strcpy.c",
         add_includes = ["src/libc"])

    clar(ctx,
         sources_ant_glob = "src/libc/string/strlen.c" \
                            " src/libc/string/memcmp.c" \
                            " src/libc/string/strcmp.c",
         test_sources_ant_glob = "test_strcmp.c",
         add_includes = ["src/libc"])

    clar(ctx,
         sources_ant_glob = "src/libc/string/strlen.c" \
                            " src/libc/string/memchr.c" \
                            " src/libc/string/strchr.c",
         test_sources_ant_glob = "test_strchr.c",
         add_includes = ["src/libc"])

    clar(ctx,
         sources_ant_glob = "src/libc/string/strspn.c",
         test_sources_ant_glob = "test_strspn.c",
         add_includes = ["src/libc"])

    clar(ctx,
         sources_ant_glob = "src/libc/string/strlen.c" \
                            " src/libc/string/memcmp.c" \
                            " src/libc/string/strstr.c" \
                            " src/libc/string/strcmp.c",
         test_sources_ant_glob = "test_strstr.c",
         add_includes = ["src/libc"])

    clar(ctx,
         sources_ant_glob = "src/libc/ctype_ptr.c",
         test_sources_ant_glob = "test_ctype.c",
         add_includes = ["src/libc"])
